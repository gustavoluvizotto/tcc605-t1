/*  Projeto 1 - Teoria da Computação e Compiladores.
 *
 *  Gilberto Volpe Neto        6783993
 *  Gustavo Luvizotto Cesar    6783544
 *  Lucas Aoki Heredia         7174032
 */

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 1;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Switch)

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;

public class Switch {

    public static ArrayList<String>  allInformation = new ArrayList<String>();
    public static Set<String>  procedureInformation = new TreeSet<String>();
    public static Set<String>  variableDeclarationInformation = 
                                new TreeSet<String>();

    
    public static void SaveLexicalInformation(Token t,String Vn){
        
        String string = ( "@(" + t.beginLine + "," + t.beginColumn + ")\t"
                 + Vn + "\t-\t" + t.image );

        //System.out.println(string);
        
        boolean add = allInformation.add(string);            
    }

    public static void ShowAllInformation(){
        Iterator it = allInformation.iterator();

        while( it.hasNext() ){
            //System.out.println(it.next());
        }
    }
   
    public static void main(String args[]) {
        Switch parser = new Switch(System.in);
     
        if( args.length < 1 ){

            System.out.println("Você não passou argumentos para o programa");
            System.out.println("Você possui duas escolhas: ");
            System.out.println("1 - Léxico");
            System.out.println("2 - Léxico com Sintático");

            System.exit(-1);
        }
        int opcao = Integer.parseInt(args[0]);

        try {
            switch( opcao ){

                case 1:
                        parser.Trabalho2();
                        break;
                case 2:
                        parser.Program();   
                        break;
                default:
                        System.out.println("Você só  possui duas escolhas: ");
                        System.out.println("1 - Léxico");
                        System.out.println("2 - Léxico com Sintático");
            }
        }   catch (ParseException e) {
                System.out.println(e.getMessage());
                System.exit(-1);
        }   catch (TokenMsgError e) {
                System.out.println(e.getMessage());
                System.exit(-1);
        }

        System.out.println("SUCESSO");

    }
}

PARSER_END(Switch)

/* COMMENTS */
MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


SKIP : { < WHITE : " " | "\t" >}
SKIP : { < EOL : "\n" | "\r" | "\r\n" > }

TOKEN : { < WHILE : "while" > }
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }

TOKEN : { < SWITCH : "switch" > }
TOKEN : { < CASE: "case" > }
TOKEN : { < COLON : ":" > }
TOKEN : { < DEFLT: "default" > }
TOKEN : { < BREAK: "break" > }

TOKEN : { < INT: "int" > }
TOKEN : { < VOID: "void" > }

TOKEN : { < #LETTER : ["a"-"z","A"-"Z","_"] > }
TOKEN : { <IDENT : <LETTER> ( <LETTER> | <DIGIT>)* >}
TOKEN : { < #DIGIT : ["0"-"9"] > }
TOKEN : { <NUMBER : (<DIGIT>)+ > }

TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < TIMES : "*" > }
TOKEN : { < DIV: "/" > }
TOKEN : { < PERCENT : "%" > }

TOKEN : { < OPAR : "(" > }
TOKEN : { < CPAR : ")" > }
TOKEN : { < OBRA : "{" > }
TOKEN : { < CBRA : "}" > }

TOKEN : { < EQU : "==" > }
TOKEN : { < LEQU : "<=" > }
TOKEN : { < GEQU : ">=" > }
TOKEN : { < LESS : "<" > }
TOKEN : { < GREAT : ">" > }
TOKEN : { < NEQU : "!=" > }

TOKEN : { < NOT : "!" > }
TOKEN : { < AND : "&&" > }
TOKEN : { < OR : "||" > }

TOKEN : { < ASSIGN : "=" > }
TOKEN : { < COMMA : "," > }
TOKEN : { < SEMICOL : ";" > }

    void Trabalho2() :
    {
    }
    {
        TokenAnalyser()
        <EOF>
        {
            return ;
        }
    }

    void TokenAnalyser() : 
    {
    }
    {
        (
            (
                Ident() 
                |
                Number() 
                |    
                SemiCol() 
                | 
                Comma() 
                | 
                Assign()  
                | 
                Or() 
                |
                And() 
                |
                Not() 
                |
                Equ() 
                |
                Lequ() 
                |
                Gequ() 
                |
                Less() 
                |
                Great() 
                |
                Nequ() 
                |
                Plus() 
                |
                Minus() 
                |
                Times() 
                |
                Div() 
                |
                Percent() 
                |
                Opar() 
                |
                Cpar() 
                |
                Obra() 
                |
                Cbra() 
                |
                If() 
                |
                Else() 
                |
                While() 
                |
                Switch() 
                |
                Case() 
                |
                Colon() 
                |
                Deflt() 
                |
                Break() 
                |
                Type() 
                |
                Void() 
            ) 
         )*
    }

    //Inicio Tokens - Análises
    
    void Void():
    {
        Token t_void;
    }
    {
        t_void = <VOID>
        {
            SaveLexicalInformation(t_void,"VOID");
        }
    }

    void Type():
    {
        Token t_type;
    }
    {
         t_type = <INT>
         {
            SaveLexicalInformation(t_type,"INT");
         }
    }

    void While():
    {
        Token t_while;
    }
    {
         t_while = <WHILE>
         {
            SaveLexicalInformation(t_while,"WHILE");
         }
    }

    void Colon():
    {
        Token t_colon;
    }
    {
        t_colon = <COLON>
        {
            SaveLexicalInformation(t_colon,"COLON");
        }
    }
    
    void Deflt():
    {
        Token t_deflt;
    }
    {
        t_deflt = <DEFLT>
        {
            SaveLexicalInformation(t_deflt,"DEFLT");
        }
    }
    
    void Case():
    {
        Token t_case;
    }
    {
        t_case = <CASE>
        {
            SaveLexicalInformation(t_case,"CASE");
        }
    }
    
    void Switch():
    {
        Token t_switch;
    }
    {
        t_switch = <SWITCH>
        {
            SaveLexicalInformation(t_switch,"SWITCH");
        }
    }


    void Break() :
    {
       Token t_break;
    }
    {
        t_break = <BREAK> 
        {
            SaveLexicalInformation(t_break,"BREAK");
        }
        SemiCol()
    }

    void SemiCol():
    {
        Token t_semicol;
    }
    {
        t_semicol = <SEMICOL>
        {
             SaveLexicalInformation(t_semicol,"SEMICOL");
        }
    }
    
    void Cbra() : 
    {
        Token t_cbra;
    }
    {
        t_cbra = <CBRA>
        {
            SaveLexicalInformation(t_cbra,"CBRA");
        }
    }    
    
    void Obra() : 
    {
        Token t_obra;
    }
    {
        t_obra = <OBRA>
        {
            SaveLexicalInformation(t_obra,"OBRA");
        }
    }    
    
    void Else() : 
    {
        Token t_else;
    }
    {
        t_else = <ELSE>
        {
            SaveLexicalInformation(t_else,"ELSE");
        }
    }    
    
    void If() : 
    {
        Token t_if;
    }
    {
        t_if = <IF>
        {
             SaveLexicalInformation(t_if,"IF");
        }
    }    
    
    void Or() : 
    {
        Token t_or;
    }
    {
       t_or = <OR>
       {
            SaveLexicalInformation(t_or,"OR");
       }
    }

    void And() : 
    {
        Token t_and;
    }
    {
       t_and = <AND>
       {
            SaveLexicalInformation(t_and,"AND");
       }
    }

    void Nequ(): 
    {
        Token t_nequ;
    }
    {
        t_nequ = <NEQU>
        {
            SaveLexicalInformation(t_nequ,"NEQU");
        }
    }
    
    void Equ(): 
    {
        Token t_equ;
    }
    {
        t_equ = <EQU>
        {
            SaveLexicalInformation(t_equ,"EQU");
        }
    }

    void Gequ() : 
    {
        Token t_gequ;
    }
    {
        t_gequ = <GEQU>
        {
            SaveLexicalInformation(t_gequ,"GEQU");
        }
    }   

    void Great() : 
    {
        Token t_great;
    }
    {
        t_great = <GREAT>
        {
            SaveLexicalInformation(t_great,"GREAT");
        }
    }   

    void Lequ() : 
    {
        Token t_lequ;
    }
    {
        t_lequ = <LEQU>
        {
            SaveLexicalInformation(t_lequ,"LEQU");
        }
    }   

    void Less() : 
    {
        Token t_less;
    }
    {
        t_less = <LESS>
        {
            SaveLexicalInformation(t_less,"LESS");
        }
    }

    void Minus() :
    {
        Token t_minus;
    }
    {
        t_minus = <MINUS>
        {
            SaveLexicalInformation(t_minus,"MINUS");
        }
    }

    void Plus() :
    {
        Token t_plus;
    }
    {
        t_plus = <PLUS>
        {
            SaveLexicalInformation(t_plus,"PLUS");    
        }
    }
    
    void Percent() :
    {
        String percent_;
        Token t_percent;
    }
    {
        t_percent = <PERCENT>
        {
            SaveLexicalInformation(t_percent,"PERCENT");
        }
    }

    void Times() :
    {
        String times_;
        Token t_times;
    }
    {
        t_times = <TIMES>
        {
            SaveLexicalInformation(t_times,"TIMES");
        }
    }

    void Div() :
    {
        String div_;
        Token t_div;
    }
    {
        t_div = <DIV>
        {
            SaveLexicalInformation(t_div,"DIV");
        }
    }

    void Opar() : 
    {
        String opar_;
        Token t_opar;
    }
    {
        t_opar = <OPAR>
        {
            SaveLexicalInformation(t_opar,"OPAR");
        }
    }
    
    void Cpar() : 
    {
        String cpar_;
        Token t_cpar;
    }
    {
        t_cpar = <CPAR>
        {
            SaveLexicalInformation(t_cpar,"CPAR");
        }
    }

    void Not() : 
    { 
        Token t_not = null;
    }
    {
          t_not = <NOT>
          {
                SaveLexicalInformation(t_not,"NOT");
          }
    }

    void Ident() :
    {
        String ident_;
        Token t_ident;    
    }
    {
        t_ident = <IDENT>    
        {  
            ident_ = t_ident.image;
            SaveLexicalInformation(t_ident,"IDENT");
        }
    }
    
    void Number() : 
    {
        Integer number_;
        Token t_number;
        String s_number;
    }
    {
        t_number = <NUMBER>
        {
            try{
                s_number = t_number.image;
                number_ = Integer.parseInt(s_number);
                if( number_ > Integer.MAX_VALUE )
                   throw new NumberFormatException(); 

                SaveLexicalInformation(t_number,"NUMBER");    
            }
            catch(NumberFormatException n){
                System.out.println("Erro de estouro de tamanho de inteiro" + " "
                + Integer.MAX_VALUE + " e o maior tamanho permitido");
            } 
        }
    }
    
    
    void Assign() :
    {
        Token t_assign;
    }
    {
        t_assign = <ASSIGN>
        {
            SaveLexicalInformation(t_assign,"ASSIGN");
        }    
    }
    
    void Comma() :
    {
        Token t_comma;
    }
    {
        t_comma = <COMMA>
        {
            SaveLexicalInformation(t_comma,"COMMA");
        }    
    }

    //Fim Tokens - Análises

    void Program() :
    {        
    }
    {   
        (    
            ( VariableDeclaration() )* 
                ProcedureDeclaration() 
            ( ProcedureDeclaration() )*
        )
        <EOF>
    }

    void ProcedureDeclaration() :
    {
    }
    {
        Void() ProcedureHeading() Obra() ProcedureBody() Cbra()   
    }

    

    void ProcedureBody() :
    {
    }
    {
        (
            VariableDeclaration()
        )*
        StatementSequence()
    }

    void ProcedureHeading() :
    {
    }
    {
        Ident() Opar() (Parameter())? Cpar()  
    }

    void ParametersList() :
    {
    }
    {
        Parameter() ( Comma() Parameter() )*
    }

    void Parameter() :
    {    
    }
    {
        Type() Ident()
    }

    void VariableDeclaration() :
    {   
    }
    {
        Type() IdentList() SemiCol()
        
    }
    
    void IdentList() : 
    {
    }
    {
        Ident() ( Assignment() )? ( Comma() IdentList() )?
    }

    void StatementSequence() : 
    {
    }
    {
        (
            Statement()
        )*    
    }
    
    void LoopStatementSequence() : 
    {
    }
    {
        ( 
            StatementSequence() 
        )
        ( 
            Break()
        )?
    }

    void Statement() :
    {
    }
    {
        ( 
            ( 
                Ident() 
                ( 
                    Assignment() 
                    | 
                    ProcedureCall() 
                ) (SemiCol())+ 
            ) 
            | 
            WhileStatement()
            | 
            SelectionStatement() 
        )
    }

    void WhileStatement() :
    {
    }
    {
        While() Opar() Expression() Cpar() Obra() LoopStatementSequence() Cbra()
        
    }

    void SelectionStatement() :
    {   
    }
    {
        IfStatement() | SwitchStatement()
    }

    void SwitchStatement() :
    {   
    }
    {
        Switch() Opar() Expression() Cpar() Obra() 
        (
            LoopStatementSequence()
        )
        (
            Case() ConstantExpression() Colon() LoopStatementSequence()
        )*
        (
            Deflt() Colon() LoopStatementSequence()
        )? Cbra()   
    }
    
    void IfStatement() :
    {
    }
    {
        If() Opar() Expression() Cpar() Obra() LoopStatementSequence()  Cbra()
        (
            Else() Obra() 
                LoopStatementSequence() 
            Cbra() 
        )?
    }
    
    void ProcedureCall() :
    {   
    }
    {
        Opar() 
        (
            ExpList()
        )? 
        Cpar()
        
    }

    void ExpList() :
    {   
    }
    {
        Expression() 
        ( 
            Comma() Expression()
        )*
        
    }

    void Assignment() :
    {   
    }
    {
        Assign() Expression()        
    }
   
    void ConstantExpression() :
    {   
    }
    {
        ConstantOrExpr()
        
    }

    void ConstantOrExpr() :
    {
    }
    {
        ConstantAndExpr() 
        (
            Or() ConstantAndExpr()
        )?
        
    }

    void ConstantAndExpr() :
    {
    }
    {
        ConstantEqualityExpr() 
        ( 
            And() ConstantEqualityExpr()
        )*
    }

    void ConstantEqualityExpr() :
    {
    }
    {
        ConstantInequationExpr() 
        ( 
            ( 
                Equ() 
                | 
                Nequ() 
            ) 
            ConstantInequationExpr()
         )?
        
    }

    void ConstantInequationExpr() :
    {   
    }
    {
        ConstantSimpleExpr() 
        ( 
            (
                Less() 
                | 
                Lequ() 
                | 
                Great()
                | 
                Gequ()
            ) 
            ConstantSimpleExpr() 
        )?
        
    }

    void ConstantSimpleExpr() :
    {                
    }
    {
        (Plus())? 
        ConstantTerm()
        ( 
            (
                Plus() 
                | 
                Minus()
            ) 
            ConstantTerm()
        )*
        
    }

    void ConstantTerm() :
    {   
    }
    {
        ConstantUnary() 
        ( 
            (
                Times() 
                | 
                Div()
                | 
                Percent()
            ) 
        ConstantUnary() 
        )*
        
    }

    void ConstantUnary() :
    {      
    }
    {
        UnaryOperator() ConstantUnary() 
        | 
        ConstantFactor()
        
    }
    
    void ConstantFactor() : 
    {
    }
    {
        Number() 
        |
        Opar() ConstantExpression() Cpar()
        
    }

    void Expression() :
    {
    }
    {
        OrExpr()	
    }

    void OrExpr() :
    { 
    }
    {
        AndExpr() 
        ( 
            Or() AndExpr() 
        )*
    }
        
    void EqualityExpr() :
    { 
    }
    {
        InequationExpr() 
        ( 
            ( 
                Equ()
                | 
                Nequ()
             ) 
             InequationExpr() 
        )?       
    }

    void AndExpr() :
    {   
    }
    {
        EqualityExpr() ( And() EqualityExpr() )*
        
    }

    void InequationExpr() :
    {
    }
    {
       SimpleExpr() 
       ( 
            ( 
                Less() 
                | 
                Lequ()
                | 
                Great()
                | 
                Gequ()
             ) 
             SimpleExpr()
        )?
    }

    void SimpleExpr() :
    { 
    }
    {
       ( 
         Plus()
       )? 
       Term() 
       ( 
            (
                 Plus() 
                 | 
                 Minus() 
            ) 
            Term()
       )*
    }

    void Term() :
    {
    }
    {
        Unary() 
        ( 
           ( 
             Times() 
             |
             Div() 
             | 
             Percent() 
            ) 
            Unary() 
        )*
    }

    void Unary() :
    {      
    }
    {
        //Ja foi resolvido mais abaixo    
        UnaryOperator() Unary() 
        |
        Factor()
        
    }

    void Factor() :
    {
    }
    {
        Ident()  //Já foi resolvido mais abaixo
        | 
        Number() //Já foi resolvido mais abaixo
        | 
        Opar() Expression() Cpar() //Já foi resolvido, falta Expression
    }
    
    void UnaryOperator() :
    {      
    }
    {
        Not()
        |
        Minus()
    }    
