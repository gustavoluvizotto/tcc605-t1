/*  Projeto 1 - Teoria da Computação e Compiladores.
 *
 *  Gilberto Volpe Neto        6783993
 *  Gustavo Luvizotto Cesar    6783544
 *  Lucas Aoki Heredia         7174032
 */

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 1;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Switch)

import java.io.PrintStream ;

public class Switch {
    
    public static void main(String args[]) {
        Switch parser = new Switch(System.in);
        while (true) {
            try {
                parser.Program();
            }   catch (ParseException e) {
                    System.out.println(e.getMessage());
                    System.exit(-1);
                }   catch (TokenMsgError e) {
                        System.out.println(e.getMessage());
                        System.exit(-1);
                    }
        }
    }
}
PARSER_END(Switch)

TOKEN : { < WHILE : "while" > }
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }

TOKEN : { < SWITCH : "switch" > }
TOKEN : { < CASE: "case" > }
TOKEN : { < COLON : ":" > }
TOKEN : { < DEFLT: "default" > }
TOKEN : { < BREAK: "break" > }

TOKEN : { < INT: "int" > }
TOKEN : { < VOID: "void" > }

SKIP  : {" " | "\t" }
SKIP : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < #LETTER : ["a"-"z","A"-"Z","_"] > }
TOKEN : { <IDENT : <LETTER> ( <LETTER> | <DIGIT>)* >}
TOKEN : { < #DIGIT : ["0"-"9"] > }
TOKEN : { <NUMBER : (<DIGIT>)+ > }

TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < TIMES : "*" > }
TOKEN : { < DIV: "/" > }
TOKEN : { < PERCENT : "%" > }

TOKEN : { < OPAR : "(" > }
TOKEN : { < CPAR : ")" > }
TOKEN : { < OBRA : "{" > }
TOKEN : { < CBRA : "}" > }

TOKEN : { < EQU : "==" > }
TOKEN : { < LEQU : "<=" > }
TOKEN : { < GEQU : ">=" > }
TOKEN : { < LESS : "<" > }
TOKEN : { < GREAT : ">" > }
TOKEN : { < NEQU : "!=" > }

TOKEN : { < NOT : "!" > }
TOKEN : { < AND : "&&" > }
TOKEN : { < OR : "||" > }

TOKEN : { < ASSIGN : "=" > }
TOKEN : { < COMMA : "," > }
TOKEN : { < SEMICOL : ";" > }

    void Program() :
    {
       // String string;
        
    }
    {   
        (VariableDeclaration())* 
            ProcedureDeclaration() 
        (ProcedureDeclaration())*
        <EOF>
    }

    void ProcedureDeclaration() :
    {
    }
    {
        Void() ProcedureHeading() Obra() ProcedureBody() Cbra()
        
    }

    void Void():
    {
        Token t_void;
    }
    {
        t_void = <VOID>
        {
            System.out.println("Void");
        }
    }

    void ProcedureBody() :
    {
        
        
    }
    {
        (VariableDeclaration())* StatementSequence()
        
    }

    void ProcedureHeading() :
    {
        
        
    }
    {
        Ident() Opar() (Parameter())? Cpar()
        
    }

    void ParametersList() :
    {
        
        
    }
    {
        Parameter() ( Comma() Parameter())*
        
    }

    void Parameter() :
    {
        
        
    }
    {
        Type() Ident()
        
    }

    void VariableDeclaration() :
    {
        
        
    }
    {
        Type() IdentList() SemiCol()
        
    }
    
    void Type():
    {
        Token t_type;
    }
    {
         t_type = <INT>
         {
            System.out.println("Type");
         }
    }

    void IdentList() : 
    {
        
        
    }
    {
        Ident() ( Assignment() )? ( Comma() IdentList() )?
        
    }

    void StatementSequence() : 
    {
        
        
    }
    {
        ( Statement() )*
        
    }
    
    void LoopStatementSequence() : 
    {
        
        
    }
    {
        ( Statement() | Break() )
        
    }

    void Statement() :
    {
        
        
    }
    {
        ( ( Ident() (Assignment() | ProcedureCall() ) | WhileStatement() | 
        SelectionStatement() ) SemiCol() (SemiCol())*) 
        
    }

    void WhileStatement() :
    {
        
        
    }
    {
        While() Opar() Expression() Cpar() Obra() LoopStatementSequence() Cbra()
        
    }

    void While():
    {
        Token t_while;
    }
    {
         t_while = <WHILE>
         {
            System.out.println("While");
         }
    }

    void SelectionStatement() :
    {
        
        
    }
    {
        IfStatement() | SwitchStatement()
        
    }

    void SwitchStatement() :
    {
        
        
    }
    {
        Switch() Opar() Expression() Cpar() Obra() 
        (
            LoopStatementSequence()
        )
        (
            Case() ConstantExpression() Colon() LoopStatementSequence()
        )+
        (
            Deflt() Colon() LoopStatementSequence()
        )? Cbra()
        
    }
    
    void Colon():
    {
        Token t_colon;
    }
    {
        t_colon = <COLON>
        {
            System.out.println(":");
        }
    }
    
    void Deflt():
    {
        Token t_deflt;
    }
    {
        t_deflt = <DEFLT>
        {
            System.out.println("Default");
        }
    }
    
    void Case():
    {
        Token t_case;
    }
    {
        t_case = <CASE>
        {
            System.out.println("case");
        }
    }
    
    void Switch():
    {
        Token t_switch;
    }
    {
        t_switch = <SWITCH>
        {
            System.out.println("switch");
        }
    }


    void Break() :
    {
       Token t_break;
    }
    {
        t_break = <BREAK> 
        SemiCol()
        {
            System.out.println("break");
        }
    }

    void SemiCol():
    {
        Token t_semicol;
    }
    {
        t_semicol = <SEMICOL>
        {
            System.out.println(";");
        }
    }

    void IfStatement() :
    {
    }
    {
        If() Opar() Expression() Cpar() Obra() LoopStatementSequence() Cbra()
        (
            Else() Obra() LoopStatementSequence() 
            (
                Break()
            )? Cbra() 
        )?
        
    }
    
    void Cbra() : 
    {
        Token t_cbra;
    }
    {
        t_cbra = <CBRA>
        {
            System.out.println("}");
        }
    }    
    
    void Obra() : 
    {
        Token t_obra;
    }
    {
        t_obra = <OBRA>
        {
            System.out.println("{");
        }
    }    
    
    void Else() : 
    {
        Token t_else;
    }
    {
        t_else = <ELSE>
        {
            System.out.println("else");
        }
    }    
    
    void If() : 
    {
        Token t_if;
    }
    {
        t_if = <IF>
        {
            System.out.println("if");
        }
    }    


    void ProcedureCall() :
    {
        
        
    }
    {
        Opar() 
        (
            ExpList()
        )? 
        Cpar()
        
    }

    void ExpList() :
    {   
    }
    {
        Expression() 
        ( 
            Comma() Expression()
        )*
        
    }

    void Comma() :
    {
        Token t_comma;
    }
    {
        t_comma = <COMMA>
        {
            System.out.println(",");
        }    
    }
    


    void Assignment() :
    {   
    }
    {
        Assign() Expression()
        
    }

    void Assign() :
    {
        Token t_assign;
    }
    {
        t_assign = <ASSIGN>
        {
            System.out.println("=");
        }    
    }
        
    void ConstantExpression() :
    {
        
        
    }
    {
        ConstantOrExpr()
        
    }

    void ConstantOrExpr() :
    {
    }
    {
        ConstantAndExpr() 
        (
            Or() ConstantAndExpr()
        )?
        
    }

    void ConstantAndExpr() :
    {
    }
    {
        ConstantEqualityExpr() 
        ( 
            And() ConstantEqualityExpr()
        )*
    }

    void ConstantEqualityExpr() :
    {
        
        
    }
    {
        ConstantInequationExpr() 
        ( 
            ( 
                Equ() 
                | 
                Nequ() 
            ) 
            ConstantInequationExpr()
         )?
        
    }

    void ConstantInequationExpr() :
    {
        
        
    }
    {
        ConstantSimpleExpr() 
        ( 
            (
                Less() 
                | 
                Lequ() 
                | 
                Great()
                | 
                Gequ()
            ) 
            ConstantSimpleExpr() 
        )?
        
    }

    void ConstantSimpleExpr() :
    {
        
        
    }
    {
        (Plus())? 
        ConstantTerm()
        ( 
            (
                Plus() 
                | 
                Minus()
            ) 
            ConstantTerm()
        )*
        
    }

    void ConstantTerm() :
    {
        
        
    }
    {
        ConstantUnary() 
        ( 
            (
                Times() 
                | 
                Div()
                | 
                Percent()
            ) 
        ConstantUnary() 
        )*
        
    }

    void ConstantUnary() :
    {      
    }
    {
        UnaryOperator() ConstantUnary() 
        | 
        ConstantFactor()
        
    }
    
    void ConstantFactor() : 
    {
        
        
    }
    {
        Number() 
        |
        Opar() ConstantExpression() Cpar()
        
    }

    void Expression() :
    {
        
        
    }
    {
        OrExpr()	
        
    }

    void OrExpr() :
    {
        
        
    }
    {
        AndExpr() ( <OR> AndExpr() )*
        
    }

    void Or() : 
    {
        Token t_or;
    }
    {
       t_or = <OR>
       {
            System.out.println("||");
       }
    }

    void AndExpr() :
    {
        
        
    }
    {
        EqualityExpr() ( And() EqualityExpr() )*
        
    }

    void And() : 
    {
        Token t_and;
    }
    {
       t_and = <AND>
       {
            System.out.println("&&");
       }
    }

    void EqualityExpr() :
    {
        
        
    }
    {
        InequationExpr() 
        ( 
            ( 
                Equ()
                | 
                Nequ()
             ) 
        InequationExpr() 
        )?       
    }
    
    void Nequ(): 
    {
        Token t_nequ;
    }
    {
        t_nequ = <NEQU>
        {
            System.out.println("!=");
        }
    }
    
    void Equ(): 
    {
        Token t_equ;
    }
    {
        t_equ = <EQU>
        {
            System.out.println("==");
        }
    }

    void InequationExpr() :
    {
    }
    {
       SimpleExpr() 
       ( 
            ( 
                <LESS> 
                | 
                <LEQU>
                | 
                <GREAT>
                | 
                <GEQU>
             ) 
             SimpleExpr()
        )?
    }

    void Gequ() : 
    {
        Token t_gequ;
    }
    {
        t_gequ = <GEQU>
        {
            System.out.println(">=");
        }
    }   

    void Great() : 
    {
        Token t_great;
    }
    {
        t_great = <GREAT>
        {
            System.out.println(">");
        }
    }   

    void Lequ() : 
    {
        Token t_lequ;
    }
    {
        t_lequ = <LEQU>
        {
            System.out.println("<=");
        }
    }   

    void Less() : 
    {
        Token t_less;
    }
    {
        t_less = <LESS>
        {
            System.out.println("<");
        }
    }   

    void SimpleExpr() :
    {
      
    }
    {
       ( 
         <PLUS>
       )? 
       Term() 
       ( 
            (
                 Plus() 
                 | 
                 Minus() 
            ) 
            Term()
       )*
    }

    void Minus() :
    {
        Token t_minus;
    }
    {
        t_minus = <MINUS>
        {
            System.out.println("-");
        }
    }

    void Plus() :
    {
        Token t_plus;
    }
    {
        t_plus = <PLUS>
        {
            System.out.println("+");
        }
    }

    void Term() :
    {
    }
    {
        Unary() 
        ( 
           ( 
             Times() 
             |
             Div() 
             | 
             Percent() 
            ) 
            Unary() 
        )*
    }

    void Percent() :
    {
        String percent_;
        Token t_percent;
    }
    {
        t_percent = <PERCENT>
        {
            System.out.println("%");
        }
    }

    void Times() :
    {
        String times_;
        Token t_times;
    }
    {
        t_times = <TIMES>
        {
            System.out.println("*");
        }
    }

    void Div() :
    {
        String div_;
        Token t_div;
    }
    {
        t_div = <DIV>
        {
            System.out.println("/");
        }
    }

    void Unary() :
    {
        
    }
    {
        //Ja foi resolvido mais abaixo    
        UnaryOperator() Unary() 
        |
        Factor()
        
    }

    void Factor() :
    {

    }
    {
        Ident()  //Já foi resolvido mais abaixo
        | 
        Number() //Já foi resolvido mais abaixo
        | 
        Opar() Expression() Cpar() //Já foi resolvido, falta Expression
    }
    
    void Opar() : 
    {
        String opar_;
        Token t_opar;
    }
    {
        t_opar = <OPAR>
        {
            System.out.println("(");
        }
    }
    
    void Cpar() : 
    {
        String cpar_;
        Token t_cpar;
    }
    {
        t_cpar = <CPAR>
        {
            System.out.println(")");
        }
    }

    void UnaryOperator() :
    {
        String unary_ = null ;
        Token t_not = null;
        Token t_minus = null;
    }
    {
        t_not = <NOT>
        {
           unary_ = t_not.image;
           
           System.out.println("!");  
           
        } 
        | t_minus = <MINUS>
        {
            unary_ = t_minus.image;
            
            System.out.println("-");
        }
    }

    void Ident() :
    {
        String ident_;
        Token t_ident;    
    }
    {
        t_ident = <IDENT>    
        {  
            ident_ = t_ident.image;
            //falta fazer comparação com os identificadores
            //da linguagem int, switch, etc
            System.out.println("Ident");
        }
    }
    
    void Number() : 
    {
        Integer number_;
        Token t_number;
        String s_number;
    }
    {
        t_number = <NUMBER>
        {
            try{
                s_number = t_number.image;
                number_ = Integer.parseInt(s_number);
                if( number_ > Integer.MAX_VALUE )
                   throw new NumberFormatException(); 

                System.out.println("Number");    
            }
            catch(NumberFormatException n){
                System.out.println("Erro de estouro de tamanho de inteiro" + " "
                + Integer.MAX_VALUE + " e o maior tamanho permitido");
            } 
        }
    }

