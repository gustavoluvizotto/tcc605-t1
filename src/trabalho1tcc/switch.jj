/*  Projeto 1 - Teoria da Computação e Compiladores.
 *
 *  Gilberto Volpe Neto        6783993
 *  Gustavo Luvizotto Cesar    6783544
 *  Lucas Aoki Heredia         7174032
 */

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

SKIP  : {" " | "\t" }
TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < #LETTER : [”a”-”z”,”A”-”Z”,"_"] > }
TOKEN : { < #DIGIT : (["0"-"9"])+ > }
TOKEN : { < NUMBER : <DIGIT> > }

TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < TIMES : "*" > }
TOKEN : { < DIV: "/" > }
TOKEN : { < PERCENT : "%" > }

TOKEN : { < OPAR : "(" > }
TOKEN : { < CPAR : ")" > }
TOKEN : { < OBRA : "{" > }
TOKEN : { < CBRA : "}" > }

TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }

TOKEN : { < SWITCH : "switch" > }
TOKEN : { < CASE: "case" > }
TOKEN : { < COLON : ":" > }
TOKEN : { < DEFAULT: "default" > }
TOKEN : { < BREAK: "break" > }

TOKEN : { < INT: "int" > }
TOKEN : { < VOID: "void" > }

TOKEN : { < EQU : "==" > }
TOKEN : { < LEQU : "<=" > }
TOKEN : { < GEQU : ">=" > }
TOKEN : { < LESS : "<" > }
TOKEN : { < GREAT : ">" > }
TOKEN : { < NEQU : "!=" > }

TOKEN : { < NOT : "!" > }
TOKEN : { < AND : "&&" > }
TOKEN : { < OR : "||" > }

TOKEN : { < ASSIGN : "=" > }
TOKEN : { < COMMA : "," > }
TOKEN : { < SEMICOL : ";" > }


PARSER_BEGIN(Switch)
import java.io.PrintStream ;
public class Switch {

    public static void main(String args[]) {
        Switch parser = new Switch(System.in);
        while (true) {
            try {
                parser.Program(System.out);
            }   catch (ParseException e) {
                    System.out.println(e.getMessage());
                    System.exit(-1);
                }   catch (TokenMsgError e) {
                        System.out.println(e.getMessage());
                        System.exit(-1);
                    }
        }
    }

    void Program() :
    {
    }
    {   
        ( VariableDeclaration() )* ProcedureDeclaration() 
        ( ProcedureDeclaration() )*
    }

    void ProcedureDeclaration() :
    {
    }
    {
        <VOID> ProcedureHeading() <OBRA> ProcedureBody() <CBRA>
    }

    void ProcedureBody() :
    {
            int value;
    }
    {
        (VariableDeclaration())* StatementSequence()
    }

    void ProcedureHeading() :
    {
    }
    {
        Ident <OPAR> (Parameter)? <CPAR>
    }

    void ParametersList() :
    {
    }
    {
        Parameter (<COMMA> Parameter)*
    }

    void Parameter() :
    {
    }
    {
        <INT> Ident
    }

    void VariableDeclaration() :
        {}
        {}

}

PARSER_END(Switch)
